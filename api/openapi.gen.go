// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
	OpenIdScopes    = "openId.Scopes"
)

// GetTagConfigurationsParams defines parameters for GetTagConfigurations.
type GetTagConfigurationsParams struct {
	// Task The id of the task to get applicable tag configurations for
	Task string `form:"task" json:"task"`

	// IncludeHidden Include tags that are normally hidden and automatically added when registering time on the task
	IncludeHidden *bool `form:"includeHidden,omitempty" json:"includeHidden,omitempty"`
}

// ExportTimeRegistrationsForUserParams defines parameters for ExportTimeRegistrationsForUser.
type ExportTimeRegistrationsForUserParams struct {
	// Start The start date of the export interval (inclusive)
	Start openapi_types.Date `form:"start" json:"start"`

	// End The end date of the export interval (inclusive)
	End openapi_types.Date `form:"end" json:"end"`
}

// ImportTimeRegistrationsJSONBody defines parameters for ImportTimeRegistrations.
type ImportTimeRegistrationsJSONBody = []struct {
	Date openapi_types.Date `json:"date"`

	// Duration ISO 8601 formatted duration component <PnDTnHnMn.nS>. Each unit is optional, but at least one must be specified
	Duration string `json:"duration"`
	Tags     []struct {
		TagConfigurationId string  `json:"tagConfigurationId"`
		Value              *string `json:"value,omitempty"`
	} `json:"tags"`
	TaskId string `json:"taskId"`
	UserId string `json:"userId"`
}

// DeleteTagRegistrationParams defines parameters for DeleteTagRegistration.
type DeleteTagRegistrationParams struct {
	// TagId The ID of the tag to delete
	TagId string `form:"tagId" json:"tagId"`
}

// GetRegistrationTagsParams defines parameters for GetRegistrationTags.
type GetRegistrationTagsParams struct {
	// RegistrationId The ID of the registration to get tags for
	RegistrationId string `form:"registrationId" json:"registrationId"`
}

// TagRegistrationJSONBody defines parameters for TagRegistration.
type TagRegistrationJSONBody struct {
	TagConfigurationId string  `json:"tagConfigurationId"`
	TimeRegistrationId string  `json:"timeRegistrationId"`
	Value              *string `json:"value,omitempty"`
}

// UpdateTagRegistrationJSONBody defines parameters for UpdateTagRegistration.
type UpdateTagRegistrationJSONBody struct {
	TagId string `json:"tagId"`
	Value string `json:"value"`
}

// GetTasksForUserParams defines parameters for GetTasksForUser.
type GetTasksForUserParams struct {
	// User The id of the user to get tasks for (Default is calling user)
	User *string `form:"user,omitempty" json:"user,omitempty"`
}

// AddTimeRegistrationForUserJSONBody defines parameters for AddTimeRegistrationForUser.
type AddTimeRegistrationForUserJSONBody struct {
	Date openapi_types.Date `json:"date"`

	// Duration ISO 8601 formatted duration component <PnDTnHnMn.nS>. Each unit is optional, but at least one must be specified
	Duration string `json:"duration"`
	Tags     *[]struct {
		TagConfigurationId string  `json:"tagConfigurationId"`
		Value              *string `json:"value,omitempty"`
	} `json:"tags,omitempty"`
	TaskId string `json:"taskId"`
}

// UpdateTimeRegistrationForUserJSONBody defines parameters for UpdateTimeRegistrationForUser.
type UpdateTimeRegistrationForUserJSONBody struct {
	Date *openapi_types.Date `json:"date,omitempty"`

	// Duration ISO 8601 formatted duration component <PnDTnHnMn.nS>. Each unit is optional, but at least one must be specified
	Duration *string `json:"duration,omitempty"`
	Status   *string `json:"status,omitempty"`
}

// UpdateTimeRegistrationForUserParams defines parameters for UpdateTimeRegistrationForUser.
type UpdateTimeRegistrationForUserParams struct {
	// TimeRegistrationId The id of the time registration to update
	TimeRegistrationId string `form:"timeRegistrationId" json:"timeRegistrationId"`
}

// ImportTimeRegistrationsJSONRequestBody defines body for ImportTimeRegistrations for application/json ContentType.
type ImportTimeRegistrationsJSONRequestBody = ImportTimeRegistrationsJSONBody

// TagRegistrationJSONRequestBody defines body for TagRegistration for application/json ContentType.
type TagRegistrationJSONRequestBody TagRegistrationJSONBody

// UpdateTagRegistrationJSONRequestBody defines body for UpdateTagRegistration for application/json ContentType.
type UpdateTagRegistrationJSONRequestBody UpdateTagRegistrationJSONBody

// AddTimeRegistrationForUserJSONRequestBody defines body for AddTimeRegistrationForUser for application/json ContentType.
type AddTimeRegistrationForUserJSONRequestBody AddTimeRegistrationForUserJSONBody

// UpdateTimeRegistrationForUserJSONRequestBody defines body for UpdateTimeRegistrationForUser for application/json ContentType.
type UpdateTimeRegistrationForUserJSONRequestBody UpdateTimeRegistrationForUserJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetTagConfigurations request
	GetTagConfigurations(ctx context.Context, params *GetTagConfigurationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportTimeRegistrationsForUser request
	ExportTimeRegistrationsForUser(ctx context.Context, params *ExportTimeRegistrationsForUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportTimeRegistrationsWithBody request with any body
	ImportTimeRegistrationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ImportTimeRegistrations(ctx context.Context, body ImportTimeRegistrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Login request
	Login(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTagRegistration request
	DeleteTagRegistration(ctx context.Context, params *DeleteTagRegistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRegistrationTags request
	GetRegistrationTags(ctx context.Context, params *GetRegistrationTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TagRegistrationWithBody request with any body
	TagRegistrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TagRegistration(ctx context.Context, body TagRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTagRegistrationWithBody request with any body
	UpdateTagRegistrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTagRegistration(ctx context.Context, body UpdateTagRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTasksForUser request
	GetTasksForUser(ctx context.Context, params *GetTasksForUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimeRegistrationsForUser request
	GetTimeRegistrationsForUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddTimeRegistrationForUserWithBody request with any body
	AddTimeRegistrationForUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddTimeRegistrationForUser(ctx context.Context, body AddTimeRegistrationForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTimeRegistrationForUserWithBody request with any body
	UpdateTimeRegistrationForUserWithBody(ctx context.Context, params *UpdateTimeRegistrationForUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTimeRegistrationForUser(ctx context.Context, params *UpdateTimeRegistrationForUserParams, body UpdateTimeRegistrationForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetTagConfigurations(ctx context.Context, params *GetTagConfigurationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagConfigurationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportTimeRegistrationsForUser(ctx context.Context, params *ExportTimeRegistrationsForUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportTimeRegistrationsForUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportTimeRegistrationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportTimeRegistrationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportTimeRegistrations(ctx context.Context, body ImportTimeRegistrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportTimeRegistrationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTagRegistration(ctx context.Context, params *DeleteTagRegistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagRegistrationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRegistrationTags(ctx context.Context, params *GetRegistrationTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRegistrationTagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagRegistrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagRegistrationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagRegistration(ctx context.Context, body TagRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagRegistrationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTagRegistrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTagRegistrationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTagRegistration(ctx context.Context, body UpdateTagRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTagRegistrationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTasksForUser(ctx context.Context, params *GetTasksForUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTasksForUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimeRegistrationsForUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimeRegistrationsForUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTimeRegistrationForUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTimeRegistrationForUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTimeRegistrationForUser(ctx context.Context, body AddTimeRegistrationForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTimeRegistrationForUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTimeRegistrationForUserWithBody(ctx context.Context, params *UpdateTimeRegistrationForUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTimeRegistrationForUserRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTimeRegistrationForUser(ctx context.Context, params *UpdateTimeRegistrationForUserParams, body UpdateTimeRegistrationForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTimeRegistrationForUserRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetTagConfigurationsRequest generates requests for GetTagConfigurations
func NewGetTagConfigurationsRequest(server string, params *GetTagConfigurationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "task", runtime.ParamLocationQuery, params.Task); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.IncludeHidden != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeHidden", runtime.ParamLocationQuery, *params.IncludeHidden); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExportTimeRegistrationsForUserRequest generates requests for ExportTimeRegistrationsForUser
func NewExportTimeRegistrationsForUserRequest(server string, params *ExportTimeRegistrationsForUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewImportTimeRegistrationsRequest calls the generic ImportTimeRegistrations builder with application/json body
func NewImportTimeRegistrationsRequest(server string, body ImportTimeRegistrationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewImportTimeRegistrationsRequestWithBody(server, "application/json", bodyReader)
}

// NewImportTimeRegistrationsRequestWithBody generates requests for ImportTimeRegistrations with any type of body
func NewImportTimeRegistrationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/import")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLoginRequest generates requests for Login
func NewLoginRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteTagRegistrationRequest generates requests for DeleteTagRegistration
func NewDeleteTagRegistrationRequest(server string, params *DeleteTagRegistrationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tagId", runtime.ParamLocationQuery, params.TagId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRegistrationTagsRequest generates requests for GetRegistrationTags
func NewGetRegistrationTagsRequest(server string, params *GetRegistrationTagsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registrationId", runtime.ParamLocationQuery, params.RegistrationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTagRegistrationRequest calls the generic TagRegistration builder with application/json body
func NewTagRegistrationRequest(server string, body TagRegistrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTagRegistrationRequestWithBody(server, "application/json", bodyReader)
}

// NewTagRegistrationRequestWithBody generates requests for TagRegistration with any type of body
func NewTagRegistrationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateTagRegistrationRequest calls the generic UpdateTagRegistration builder with application/json body
func NewUpdateTagRegistrationRequest(server string, body UpdateTagRegistrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTagRegistrationRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateTagRegistrationRequestWithBody generates requests for UpdateTagRegistration with any type of body
func NewUpdateTagRegistrationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTasksForUserRequest generates requests for GetTasksForUser
func NewGetTasksForUserRequest(server string, params *GetTasksForUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/task")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTimeRegistrationsForUserRequest generates requests for GetTimeRegistrationsForUser
func NewGetTimeRegistrationsForUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/time-registration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddTimeRegistrationForUserRequest calls the generic AddTimeRegistrationForUser builder with application/json body
func NewAddTimeRegistrationForUserRequest(server string, body AddTimeRegistrationForUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddTimeRegistrationForUserRequestWithBody(server, "application/json", bodyReader)
}

// NewAddTimeRegistrationForUserRequestWithBody generates requests for AddTimeRegistrationForUser with any type of body
func NewAddTimeRegistrationForUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/time-registration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateTimeRegistrationForUserRequest calls the generic UpdateTimeRegistrationForUser builder with application/json body
func NewUpdateTimeRegistrationForUserRequest(server string, params *UpdateTimeRegistrationForUserParams, body UpdateTimeRegistrationForUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTimeRegistrationForUserRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUpdateTimeRegistrationForUserRequestWithBody generates requests for UpdateTimeRegistrationForUser with any type of body
func NewUpdateTimeRegistrationForUserRequestWithBody(server string, params *UpdateTimeRegistrationForUserParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/time-registration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timeRegistrationId", runtime.ParamLocationQuery, params.TimeRegistrationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetTagConfigurationsWithResponse request
	GetTagConfigurationsWithResponse(ctx context.Context, params *GetTagConfigurationsParams, reqEditors ...RequestEditorFn) (*GetTagConfigurationsResponse, error)

	// ExportTimeRegistrationsForUserWithResponse request
	ExportTimeRegistrationsForUserWithResponse(ctx context.Context, params *ExportTimeRegistrationsForUserParams, reqEditors ...RequestEditorFn) (*ExportTimeRegistrationsForUserResponse, error)

	// ImportTimeRegistrationsWithBodyWithResponse request with any body
	ImportTimeRegistrationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportTimeRegistrationsResponse, error)

	ImportTimeRegistrationsWithResponse(ctx context.Context, body ImportTimeRegistrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*ImportTimeRegistrationsResponse, error)

	// LoginWithResponse request
	LoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	// DeleteTagRegistrationWithResponse request
	DeleteTagRegistrationWithResponse(ctx context.Context, params *DeleteTagRegistrationParams, reqEditors ...RequestEditorFn) (*DeleteTagRegistrationResponse, error)

	// GetRegistrationTagsWithResponse request
	GetRegistrationTagsWithResponse(ctx context.Context, params *GetRegistrationTagsParams, reqEditors ...RequestEditorFn) (*GetRegistrationTagsResponse, error)

	// TagRegistrationWithBodyWithResponse request with any body
	TagRegistrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TagRegistrationResponse, error)

	TagRegistrationWithResponse(ctx context.Context, body TagRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*TagRegistrationResponse, error)

	// UpdateTagRegistrationWithBodyWithResponse request with any body
	UpdateTagRegistrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTagRegistrationResponse, error)

	UpdateTagRegistrationWithResponse(ctx context.Context, body UpdateTagRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTagRegistrationResponse, error)

	// GetTasksForUserWithResponse request
	GetTasksForUserWithResponse(ctx context.Context, params *GetTasksForUserParams, reqEditors ...RequestEditorFn) (*GetTasksForUserResponse, error)

	// GetTimeRegistrationsForUserWithResponse request
	GetTimeRegistrationsForUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTimeRegistrationsForUserResponse, error)

	// AddTimeRegistrationForUserWithBodyWithResponse request with any body
	AddTimeRegistrationForUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTimeRegistrationForUserResponse, error)

	AddTimeRegistrationForUserWithResponse(ctx context.Context, body AddTimeRegistrationForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTimeRegistrationForUserResponse, error)

	// UpdateTimeRegistrationForUserWithBodyWithResponse request with any body
	UpdateTimeRegistrationForUserWithBodyWithResponse(ctx context.Context, params *UpdateTimeRegistrationForUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTimeRegistrationForUserResponse, error)

	UpdateTimeRegistrationForUserWithResponse(ctx context.Context, params *UpdateTimeRegistrationForUserParams, body UpdateTimeRegistrationForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTimeRegistrationForUserResponse, error)
}

type GetTagConfigurationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		TagConfigurationId string `json:"tagConfigurationId"`

		// TagConfigurationName The name of the tag configuration
		TagConfigurationName string `json:"tagConfigurationName"`

		// TagDefaultValue The default value to use when no other value is specified when tagging a time registration
		TagDefaultValue *string `json:"tagDefaultValue,omitempty"`

		// TagTaskRelation Specifies the relation to the task. For example, whether the tag is optional or mandatory
		TagTaskRelation string `json:"tagTaskRelation"`

		// TagValueType Describes the value type of the tag.
		TagValueType string `json:"tagValueType"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTagConfigurationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagConfigurationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportTimeRegistrationsForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExportTimeRegistrationsForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportTimeRegistrationsForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportTimeRegistrationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// Message When status = FAILED, this will provide a description of the problem
		Message        *string `json:"message,omitempty"`
		RegistrationId string  `json:"registrationId"`

		// Status Describes the status of the registration (SUCCESS, PENDING, FAILED)
		Status string `json:"status"`
	}
}

// Status returns HTTPResponse.Status
func (r ImportTimeRegistrationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportTimeRegistrationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTagRegistrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTagRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTagRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRegistrationTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		TagConfigurationId string  `json:"tagConfigurationId"`
		TagValue           *string `json:"tagValue,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetRegistrationTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRegistrationTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TagRegistrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TagRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TagRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTagRegistrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateTagRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTagRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTasksForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// Name The name of the task
		Name   string `json:"name"`
		TaskId string `json:"taskId"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTasksForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTasksForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimeRegistrationsForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Date openapi_types.Date `json:"date"`

		// Duration ISO 8601 formatted duration component <PnDTnHnMn.nS>. Each unit is optional, but at least one must be specified
		Duration string `json:"duration"`

		// Registered The registration time as Unix milliseconds timestamp
		Registered     int64  `json:"registered"`
		RegistrationId string `json:"registrationId"`
		Status         string `json:"status"`
		TaskId         string `json:"taskId"`
		UserId         string `json:"userId"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTimeRegistrationsForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimeRegistrationsForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddTimeRegistrationForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddTimeRegistrationForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddTimeRegistrationForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTimeRegistrationForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateTimeRegistrationForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTimeRegistrationForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetTagConfigurationsWithResponse request returning *GetTagConfigurationsResponse
func (c *ClientWithResponses) GetTagConfigurationsWithResponse(ctx context.Context, params *GetTagConfigurationsParams, reqEditors ...RequestEditorFn) (*GetTagConfigurationsResponse, error) {
	rsp, err := c.GetTagConfigurations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagConfigurationsResponse(rsp)
}

// ExportTimeRegistrationsForUserWithResponse request returning *ExportTimeRegistrationsForUserResponse
func (c *ClientWithResponses) ExportTimeRegistrationsForUserWithResponse(ctx context.Context, params *ExportTimeRegistrationsForUserParams, reqEditors ...RequestEditorFn) (*ExportTimeRegistrationsForUserResponse, error) {
	rsp, err := c.ExportTimeRegistrationsForUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportTimeRegistrationsForUserResponse(rsp)
}

// ImportTimeRegistrationsWithBodyWithResponse request with arbitrary body returning *ImportTimeRegistrationsResponse
func (c *ClientWithResponses) ImportTimeRegistrationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportTimeRegistrationsResponse, error) {
	rsp, err := c.ImportTimeRegistrationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportTimeRegistrationsResponse(rsp)
}

func (c *ClientWithResponses) ImportTimeRegistrationsWithResponse(ctx context.Context, body ImportTimeRegistrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*ImportTimeRegistrationsResponse, error) {
	rsp, err := c.ImportTimeRegistrations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportTimeRegistrationsResponse(rsp)
}

// LoginWithResponse request returning *LoginResponse
func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// DeleteTagRegistrationWithResponse request returning *DeleteTagRegistrationResponse
func (c *ClientWithResponses) DeleteTagRegistrationWithResponse(ctx context.Context, params *DeleteTagRegistrationParams, reqEditors ...RequestEditorFn) (*DeleteTagRegistrationResponse, error) {
	rsp, err := c.DeleteTagRegistration(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagRegistrationResponse(rsp)
}

// GetRegistrationTagsWithResponse request returning *GetRegistrationTagsResponse
func (c *ClientWithResponses) GetRegistrationTagsWithResponse(ctx context.Context, params *GetRegistrationTagsParams, reqEditors ...RequestEditorFn) (*GetRegistrationTagsResponse, error) {
	rsp, err := c.GetRegistrationTags(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRegistrationTagsResponse(rsp)
}

// TagRegistrationWithBodyWithResponse request with arbitrary body returning *TagRegistrationResponse
func (c *ClientWithResponses) TagRegistrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TagRegistrationResponse, error) {
	rsp, err := c.TagRegistrationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagRegistrationResponse(rsp)
}

func (c *ClientWithResponses) TagRegistrationWithResponse(ctx context.Context, body TagRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*TagRegistrationResponse, error) {
	rsp, err := c.TagRegistration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagRegistrationResponse(rsp)
}

// UpdateTagRegistrationWithBodyWithResponse request with arbitrary body returning *UpdateTagRegistrationResponse
func (c *ClientWithResponses) UpdateTagRegistrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTagRegistrationResponse, error) {
	rsp, err := c.UpdateTagRegistrationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTagRegistrationResponse(rsp)
}

func (c *ClientWithResponses) UpdateTagRegistrationWithResponse(ctx context.Context, body UpdateTagRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTagRegistrationResponse, error) {
	rsp, err := c.UpdateTagRegistration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTagRegistrationResponse(rsp)
}

// GetTasksForUserWithResponse request returning *GetTasksForUserResponse
func (c *ClientWithResponses) GetTasksForUserWithResponse(ctx context.Context, params *GetTasksForUserParams, reqEditors ...RequestEditorFn) (*GetTasksForUserResponse, error) {
	rsp, err := c.GetTasksForUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTasksForUserResponse(rsp)
}

// GetTimeRegistrationsForUserWithResponse request returning *GetTimeRegistrationsForUserResponse
func (c *ClientWithResponses) GetTimeRegistrationsForUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTimeRegistrationsForUserResponse, error) {
	rsp, err := c.GetTimeRegistrationsForUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimeRegistrationsForUserResponse(rsp)
}

// AddTimeRegistrationForUserWithBodyWithResponse request with arbitrary body returning *AddTimeRegistrationForUserResponse
func (c *ClientWithResponses) AddTimeRegistrationForUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTimeRegistrationForUserResponse, error) {
	rsp, err := c.AddTimeRegistrationForUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTimeRegistrationForUserResponse(rsp)
}

func (c *ClientWithResponses) AddTimeRegistrationForUserWithResponse(ctx context.Context, body AddTimeRegistrationForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTimeRegistrationForUserResponse, error) {
	rsp, err := c.AddTimeRegistrationForUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTimeRegistrationForUserResponse(rsp)
}

// UpdateTimeRegistrationForUserWithBodyWithResponse request with arbitrary body returning *UpdateTimeRegistrationForUserResponse
func (c *ClientWithResponses) UpdateTimeRegistrationForUserWithBodyWithResponse(ctx context.Context, params *UpdateTimeRegistrationForUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTimeRegistrationForUserResponse, error) {
	rsp, err := c.UpdateTimeRegistrationForUserWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTimeRegistrationForUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateTimeRegistrationForUserWithResponse(ctx context.Context, params *UpdateTimeRegistrationForUserParams, body UpdateTimeRegistrationForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTimeRegistrationForUserResponse, error) {
	rsp, err := c.UpdateTimeRegistrationForUser(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTimeRegistrationForUserResponse(rsp)
}

// ParseGetTagConfigurationsResponse parses an HTTP response from a GetTagConfigurationsWithResponse call
func ParseGetTagConfigurationsResponse(rsp *http.Response) (*GetTagConfigurationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagConfigurationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			TagConfigurationId string `json:"tagConfigurationId"`

			// TagConfigurationName The name of the tag configuration
			TagConfigurationName string `json:"tagConfigurationName"`

			// TagDefaultValue The default value to use when no other value is specified when tagging a time registration
			TagDefaultValue *string `json:"tagDefaultValue,omitempty"`

			// TagTaskRelation Specifies the relation to the task. For example, whether the tag is optional or mandatory
			TagTaskRelation string `json:"tagTaskRelation"`

			// TagValueType Describes the value type of the tag.
			TagValueType string `json:"tagValueType"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExportTimeRegistrationsForUserResponse parses an HTTP response from a ExportTimeRegistrationsForUserWithResponse call
func ParseExportTimeRegistrationsForUserResponse(rsp *http.Response) (*ExportTimeRegistrationsForUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportTimeRegistrationsForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseImportTimeRegistrationsResponse parses an HTTP response from a ImportTimeRegistrationsWithResponse call
func ParseImportTimeRegistrationsResponse(rsp *http.Response) (*ImportTimeRegistrationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportTimeRegistrationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// Message When status = FAILED, this will provide a description of the problem
			Message        *string `json:"message,omitempty"`
			RegistrationId string  `json:"registrationId"`

			// Status Describes the status of the registration (SUCCESS, PENDING, FAILED)
			Status string `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteTagRegistrationResponse parses an HTTP response from a DeleteTagRegistrationWithResponse call
func ParseDeleteTagRegistrationResponse(rsp *http.Response) (*DeleteTagRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTagRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRegistrationTagsResponse parses an HTTP response from a GetRegistrationTagsWithResponse call
func ParseGetRegistrationTagsResponse(rsp *http.Response) (*GetRegistrationTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRegistrationTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			TagConfigurationId string  `json:"tagConfigurationId"`
			TagValue           *string `json:"tagValue,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTagRegistrationResponse parses an HTTP response from a TagRegistrationWithResponse call
func ParseTagRegistrationResponse(rsp *http.Response) (*TagRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TagRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateTagRegistrationResponse parses an HTTP response from a UpdateTagRegistrationWithResponse call
func ParseUpdateTagRegistrationResponse(rsp *http.Response) (*UpdateTagRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTagRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTasksForUserResponse parses an HTTP response from a GetTasksForUserWithResponse call
func ParseGetTasksForUserResponse(rsp *http.Response) (*GetTasksForUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTasksForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// Name The name of the task
			Name   string `json:"name"`
			TaskId string `json:"taskId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTimeRegistrationsForUserResponse parses an HTTP response from a GetTimeRegistrationsForUserWithResponse call
func ParseGetTimeRegistrationsForUserResponse(rsp *http.Response) (*GetTimeRegistrationsForUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimeRegistrationsForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Date openapi_types.Date `json:"date"`

			// Duration ISO 8601 formatted duration component <PnDTnHnMn.nS>. Each unit is optional, but at least one must be specified
			Duration string `json:"duration"`

			// Registered The registration time as Unix milliseconds timestamp
			Registered     int64  `json:"registered"`
			RegistrationId string `json:"registrationId"`
			Status         string `json:"status"`
			TaskId         string `json:"taskId"`
			UserId         string `json:"userId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddTimeRegistrationForUserResponse parses an HTTP response from a AddTimeRegistrationForUserWithResponse call
func ParseAddTimeRegistrationForUserResponse(rsp *http.Response) (*AddTimeRegistrationForUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddTimeRegistrationForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateTimeRegistrationForUserResponse parses an HTTP response from a UpdateTimeRegistrationForUserWithResponse call
func ParseUpdateTimeRegistrationForUserResponse(rsp *http.Response) (*UpdateTimeRegistrationForUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTimeRegistrationForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
